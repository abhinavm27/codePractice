public int listCompare(Node a1, Node a2) {
    /*
    Input: list1 = g->e->e->k->s->a
       list2 = g->e->e->k->s
    Output: 1

    Input: list1 = g->e->e->k->s
           list2 = g->e->e->k->s
    Output: 0
    
    */
    
    while(a1!=null && a2!=null) {
      if((a1.cdata)<(a2.cdata)) {
        return -1;
      }
      else if((a1.cdata)>(a2.cdata)) {
        return +1;
      }
      else if((a1.cdata)==(a2.cdata)) { 
        a1=a1.next;
        a2=a2.next;
        
      }
    }
    if(a1!=null){
      return 1;
    }
    if(a2!=null){
      return -1;
    }
    return 0;
  }
  
  public Node reverseMergeList(Node a1, Node a2){
    /*
    Input:  a: 5->10->15->40
          b: 2->3->20 
    Output: res: 40->20->15->10->5->3->2
    */
    Node res = null;
    while(a1!=null && a2!=null) {
      if(a1.data<=a2.data) {
        Node newNode = new Node(a1.data);
        if(res==null) {
          res = newNode;
        }
        else {
          newNode.next = res;
          res = newNode;
        }
        a1=a1.next;
      }
      else if(a2.data<a1.data) {
        Node newNode = new Node(a2.data);
        if(res==null) {
          res = newNode;
        }
        else {
          newNode.next = res;
          res = newNode;
        }
        a2=a2.next;
      }
    }
    System.out.println(res.data);
    while(a1!=null) {
       Node newNode = new Node(a1.data);
        if(res==null) {
          res = newNode;
        }
      else {
        newNode.next = res;
          res = newNode;
      }
      a1=a1.next;
    }
    while(a2!=null) {
       Node newNode = new Node(a2.data);
        if(res==null) {
          res = newNode;
        }
      else {
        newNode.next = res;
          res = newNode;
      }
      a2=a2.next;
    }
    return res;
  }
  
  public Node reverseList(Node x){
    Node curr=x;
    Node prev=null;
    Node next=null;
    while(curr!=null) {
      next=curr.next;
      curr.next=prev;
      prev=curr;
      curr=next;
    }
    return prev;
    
  }
  
  public Node rearrangeList(Node x) {
    /*
    Input:  1 -> 2 -> 3 -> 4
    Output: 1 -> 4 -> 2 -> 3

    Input:  1 -> 2 -> 3 -> 4 -> 5
    Output: 1 -> 5 -> 2 -> 4 -> 3 
    */
    Node slow = x;
    Node fast = x.next;
    while(fast!=null && fast.next!=null) {
      slow = slow.next;
      fast = fast.next.next;
    }
    Node revFirst = reverseList(slow.next);
    slow.next = null;  //needs to cout off the fwd and bckwd lists
    Node first = x;
    Node second = revFirst;
    Node res = null;
    printList(first);
    printList(second);
    while(first!=null || second!=null) {
      if(first!=null) {
        if(res==null)
          res= first;
        else {
          res.next=first;
          res = res.next;
        }
        first= first.next;
      }
      if(second!=null) {
        res.next = second;
        res = res.next;

        second=second.next;
      }
      
    }
    return x;
  }
